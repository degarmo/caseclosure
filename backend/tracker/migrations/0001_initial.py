# Generated by Django 4.2.19 on 2025-08-22 02:23

from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cases', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_id', models.CharField(db_index=True, max_length=255, unique=True)),
                ('fingerprint_hash', models.CharField(db_index=True, max_length=255)),
                ('fingerprint_confidence', models.FloatField(default=0.0)),
                ('ip_address', models.GenericIPAddressField()),
                ('ip_country', models.CharField(blank=True, max_length=2)),
                ('ip_city', models.CharField(blank=True, max_length=100)),
                ('is_vpn', models.BooleanField(default=False)),
                ('user_agent', models.TextField()),
                ('browser', models.CharField(blank=True, max_length=50)),
                ('os', models.CharField(blank=True, max_length=50)),
                ('device_type', models.CharField(blank=True, max_length=20)),
                ('canvas_fingerprint', models.CharField(blank=True, max_length=255)),
                ('webgl_fingerprint', models.CharField(blank=True, max_length=255)),
                ('audio_fingerprint', models.CharField(blank=True, max_length=255)),
                ('fonts_fingerprint', models.CharField(blank=True, max_length=255)),
                ('cookies_enabled', models.BooleanField(default=True)),
                ('javascript_enabled', models.BooleanField(default=True)),
                ('do_not_track', models.BooleanField(default=False)),
                ('ad_blocker', models.BooleanField(default=False)),
                ('timezone', models.CharField(blank=True, max_length=50)),
                ('timezone_offset', models.IntegerField(blank=True, null=True)),
                ('local_time', models.DateTimeField(blank=True, null=True)),
                ('is_unusual_hour', models.BooleanField(default=False)),
                ('page_views', models.IntegerField(default=0)),
                ('total_duration', models.IntegerField(default=0)),
                ('bounce', models.BooleanField(default=False)),
                ('entry_page', models.CharField(blank=True, max_length=255)),
                ('exit_page', models.CharField(blank=True, max_length=255)),
                ('avg_time_per_page', models.FloatField(default=0.0)),
                ('actions_count', models.IntegerField(default=0)),
                ('forms_submitted', models.IntegerField(default=0)),
                ('copy_events', models.IntegerField(default=0)),
                ('rapid_clicks', models.IntegerField(default=0)),
                ('suspicious_score', models.FloatField(default=0.0)),
                ('is_suspicious', models.BooleanField(db_index=True, default=False)),
                ('risk_level', models.CharField(blank=True, max_length=20)),
                ('ml_analysis_results', models.JSONField(blank=True, default=dict)),
                ('risk_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('case', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tracker_sessions', to='cases.case')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_sessions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TrackingEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_identifier', models.CharField(db_index=True, max_length=255)),
                ('fingerprint_hash', models.CharField(db_index=True, max_length=255)),
                ('event_type', models.CharField(choices=[('page_view', 'Page View'), ('page_exit', 'Page Exit'), ('navigation', 'Navigation'), ('scroll', 'Scroll'), ('visibility_change', 'Visibility Change'), ('click', 'Click'), ('form_submit', 'Form Submit'), ('form_field_focus', 'Form Field Focus'), ('post_view', 'Post View'), ('post_create', 'Post Create'), ('comment', 'Comment'), ('like', 'Like'), ('share', 'Share'), ('copy', 'Copy'), ('download', 'Download'), ('media_view', 'Media View'), ('video_play', 'Video Play'), ('video_pause', 'Video Pause'), ('gallery_open', 'Gallery Open'), ('tip_submit', 'Tip Submit'), ('contact_submit', 'Contact Submit'), ('tip_view', 'Tip View'), ('donation_click', 'Donation Click'), ('donation_complete', 'Donation Complete'), ('donation_cancel', 'Donation Cancel'), ('login_attempt', 'Login Attempt'), ('login_success', 'Login Success'), ('login_fail', 'Login Fail'), ('logout', 'Logout'), ('rapid_navigation', 'Rapid Navigation'), ('vpn_detected', 'VPN Detected'), ('suspicious_pattern', 'Suspicious Pattern'), ('anomaly_detected', 'Anomaly Detected')], db_index=True, max_length=100)),
                ('event_data', models.JSONField(blank=True, default=dict)),
                ('page_url', models.TextField()),
                ('page_title', models.CharField(blank=True, max_length=255)),
                ('referrer_url', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField(db_index=True)),
                ('ip_country', models.CharField(blank=True, max_length=2)),
                ('ip_region', models.CharField(blank=True, max_length=100)),
                ('ip_city', models.CharField(blank=True, max_length=100)),
                ('ip_latitude', models.FloatField(blank=True, null=True)),
                ('ip_longitude', models.FloatField(blank=True, null=True)),
                ('is_vpn', models.BooleanField(default=False)),
                ('is_proxy', models.BooleanField(default=False)),
                ('is_tor', models.BooleanField(default=False)),
                ('isp', models.CharField(blank=True, max_length=255)),
                ('user_agent', models.TextField()),
                ('browser', models.CharField(blank=True, max_length=50)),
                ('browser_version', models.CharField(blank=True, max_length=20)),
                ('os', models.CharField(blank=True, max_length=50)),
                ('os_version', models.CharField(blank=True, max_length=20)),
                ('device_type', models.CharField(blank=True, max_length=20)),
                ('device_brand', models.CharField(blank=True, max_length=50)),
                ('device_model', models.CharField(blank=True, max_length=50)),
                ('screen_width', models.IntegerField(blank=True, null=True)),
                ('screen_height', models.IntegerField(blank=True, null=True)),
                ('viewport_width', models.IntegerField(blank=True, null=True)),
                ('viewport_height', models.IntegerField(blank=True, null=True)),
                ('color_depth', models.IntegerField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('timezone', models.CharField(blank=True, max_length=50)),
                ('local_timestamp', models.DateTimeField(blank=True, null=True)),
                ('is_unusual_hour', models.BooleanField(default=False)),
                ('time_on_page', models.IntegerField(blank=True, null=True)),
                ('scroll_depth', models.FloatField(blank=True, null=True)),
                ('clicks_count', models.IntegerField(default=0)),
                ('suspicious_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('flags', models.JSONField(blank=True, default=dict)),
                ('is_suspicious', models.BooleanField(db_index=True, default=False)),
                ('processed', models.BooleanField(default=False)),
                ('ml_analyzed', models.BooleanField(default=False)),
                ('alerted', models.BooleanField(default=False)),
                ('case', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tracking_events', to='cases.case')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='tracker.usersession')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tracking_events',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SuspiciousActivity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_identifier', models.CharField(db_index=True, max_length=255)),
                ('fingerprint_hash', models.CharField(db_index=True, max_length=255)),
                ('ip_address', models.GenericIPAddressField()),
                ('activity_type', models.CharField(choices=[('rapid_visits', 'Rapid Visits'), ('unusual_hour', 'Unusual Hour Access'), ('excessive_page_views', 'Excessive Page Views'), ('vpn_usage', 'VPN/Proxy Usage'), ('tor_usage', 'Tor Usage'), ('ip_change', 'IP Address Change'), ('geo_jump', 'Geographic Jump'), ('device_change', 'Device Change'), ('fingerprint_mismatch', 'Fingerprint Mismatch'), ('multiple_devices', 'Multiple Devices'), ('rapid_navigation', 'Rapid Navigation'), ('no_interaction', 'No Interaction'), ('excessive_copying', 'Excessive Copying'), ('data_scraping', 'Data Scraping'), ('form_flooding', 'Form Flooding'), ('sql_injection', 'SQL Injection Attempt'), ('xss_attempt', 'XSS Attempt'), ('bot_behavior', 'Bot Behavior'), ('credential_stuffing', 'Credential Stuffing'), ('fake_tip', 'Fake Tip Submission'), ('spam_content', 'Spam Content'), ('harassment', 'Harassment'), ('suspicious_pattern', 'Suspicious Pattern')], db_index=True, max_length=100)),
                ('severity_level', models.IntegerField(choices=[(1, 'Low'), (2, 'Medium'), (3, 'High'), (4, 'Critical'), (5, 'Emergency')], db_index=True)),
                ('confidence_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('details', models.JSONField(default=dict)),
                ('evidence', models.JSONField(default=dict)),
                ('ml_prediction', models.FloatField(blank=True, null=True)),
                ('ml_features', models.JSONField(blank=True, default=dict)),
                ('anomaly_score', models.FloatField(blank=True, null=True)),
                ('reviewed', models.BooleanField(default=False)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('action_taken', models.TextField(blank=True)),
                ('flagged_for_law_enforcement', models.BooleanField(default=False)),
                ('law_enforcement_notified', models.BooleanField(default=False)),
                ('law_enforcement_reference', models.CharField(blank=True, max_length=100)),
                ('false_positive', models.BooleanField(default=False)),
                ('whitelisted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('case', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='suspicious_activities', to='cases.case')),
                ('related_events', models.ManyToManyField(blank=True, to='tracker.trackingevent')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_activities', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='suspicious_activities', to='tracker.usersession')),
            ],
            options={
                'db_table': 'suspicious_activities',
                'ordering': ['-severity_level', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MLModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('model_type', models.CharField(choices=[('anomaly_detection', 'Anomaly Detection'), ('pattern_recognition', 'Pattern Recognition'), ('risk_scoring', 'Risk Scoring'), ('behavior_clustering', 'Behavior Clustering'), ('sequence_analysis', 'Sequence Analysis')], max_length=50)),
                ('version', models.CharField(max_length=20)),
                ('description', models.TextField(blank=True)),
                ('algorithm', models.CharField(max_length=100)),
                ('parameters', models.JSONField(default=dict)),
                ('features', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, size=None)),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('precision', models.FloatField(blank=True, null=True)),
                ('recall', models.FloatField(blank=True, null=True)),
                ('f1_score', models.FloatField(blank=True, null=True)),
                ('auc_score', models.FloatField(blank=True, null=True)),
                ('training_samples', models.IntegerField(blank=True, null=True)),
                ('training_date', models.DateTimeField(blank=True, null=True)),
                ('training_duration', models.IntegerField(blank=True, null=True)),
                ('model_file_path', models.CharField(blank=True, max_length=255)),
                ('model_size', models.IntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('deployed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'ml_models',
                'ordering': ['-created_at'],
                'unique_together': {('model_type', 'version')},
            },
        ),
        migrations.CreateModel(
            name='DeviceFingerprint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('fingerprint_hash', models.CharField(db_index=True, max_length=255, unique=True)),
                ('user_agent', models.TextField()),
                ('browser', models.CharField(max_length=50)),
                ('browser_version', models.CharField(max_length=20)),
                ('os', models.CharField(max_length=50)),
                ('os_version', models.CharField(max_length=20)),
                ('platform', models.CharField(max_length=50)),
                ('device_type', models.CharField(max_length=20)),
                ('device_memory', models.IntegerField(blank=True, null=True)),
                ('hardware_concurrency', models.IntegerField(blank=True, null=True)),
                ('screen_resolution', models.CharField(max_length=20)),
                ('color_depth', models.IntegerField()),
                ('languages', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), blank=True, default=list, size=None)),
                ('timezone', models.CharField(max_length=50)),
                ('timezone_offset', models.IntegerField()),
                ('canvas_fingerprint', models.TextField()),
                ('webgl_fingerprint', models.TextField(blank=True)),
                ('audio_fingerprint', models.TextField(blank=True)),
                ('fonts', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, size=None)),
                ('plugins', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, size=None)),
                ('mime_types', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, size=None)),
                ('touch_support', models.BooleanField(default=False)),
                ('max_touch_points', models.IntegerField(default=0)),
                ('cookies_enabled', models.BooleanField(default=True)),
                ('local_storage', models.BooleanField(default=True)),
                ('session_storage', models.BooleanField(default=True)),
                ('indexed_db', models.BooleanField(default=True)),
                ('trust_score', models.FloatField(default=0.5)),
                ('is_suspicious', models.BooleanField(default=False)),
                ('is_bot', models.BooleanField(default=False)),
                ('known_ips', django.contrib.postgres.fields.ArrayField(base_field=models.GenericIPAddressField(), blank=True, default=list, size=None)),
                ('first_seen', models.DateTimeField(auto_now_add=True)),
                ('last_seen', models.DateTimeField(auto_now=True)),
                ('total_sessions', models.IntegerField(default=1)),
                ('associated_cases', models.ManyToManyField(blank=True, to='cases.case')),
            ],
            options={
                'db_table': 'device_fingerprints',
                'ordering': ['-last_seen'],
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('alert_type', models.CharField(choices=[('suspicious_user', 'Suspicious User Detected'), ('high_risk', 'High Risk Activity'), ('pattern_detected', 'Pattern Detected'), ('threshold_exceeded', 'Threshold Exceeded'), ('law_enforcement', 'Law Enforcement Alert'), ('system', 'System Alert'), ('ml_detection', 'ML Detection'), ('daily_summary', 'Daily Summary')], max_length=50)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('fingerprint_hash', models.CharField(blank=True, max_length=255)),
                ('data', models.JSONField(default=dict)),
                ('recommended_actions', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
                ('acknowledged', models.BooleanField(default=False)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True)),
                ('email_sent', models.BooleanField(default=False)),
                ('sms_sent', models.BooleanField(default=False)),
                ('push_sent', models.BooleanField(default=False)),
                ('notification_sent', models.BooleanField(default=False)),
                ('notification_sent_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_alerts', to=settings.AUTH_USER_MODEL)),
                ('case', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tracker_alerts', to='cases.case')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_alerts', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tracker.usersession')),
                ('suspicious_activity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tracker.suspiciousactivity')),
            ],
            options={
                'db_table': 'alerts',
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['fingerprint_hash', 'created_at'], name='user_sessio_fingerp_a36ca9_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['case', 'created_at'], name='user_sessio_case_id_3a1402_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['is_suspicious', 'created_at'], name='user_sessio_is_susp_50ce33_idx'),
        ),
        migrations.AddIndex(
            model_name='trackingevent',
            index=models.Index(fields=['case', 'timestamp'], name='tracking_ev_case_id_82e054_idx'),
        ),
        migrations.AddIndex(
            model_name='trackingevent',
            index=models.Index(fields=['fingerprint_hash', 'timestamp'], name='tracking_ev_fingerp_34f0f1_idx'),
        ),
        migrations.AddIndex(
            model_name='trackingevent',
            index=models.Index(fields=['session_identifier', 'timestamp'], name='tracking_ev_session_a99ba8_idx'),
        ),
        migrations.AddIndex(
            model_name='trackingevent',
            index=models.Index(fields=['event_type', 'timestamp'], name='tracking_ev_event_t_b28942_idx'),
        ),
        migrations.AddIndex(
            model_name='trackingevent',
            index=models.Index(fields=['is_suspicious', 'timestamp'], name='tracking_ev_is_susp_a8ea83_idx'),
        ),
        migrations.AddIndex(
            model_name='trackingevent',
            index=models.Index(fields=['ip_address', 'timestamp'], name='tracking_ev_ip_addr_35b46d_idx'),
        ),
        migrations.AddIndex(
            model_name='suspiciousactivity',
            index=models.Index(fields=['case', 'severity_level', 'created_at'], name='suspicious__case_id_aeba30_idx'),
        ),
        migrations.AddIndex(
            model_name='suspiciousactivity',
            index=models.Index(fields=['fingerprint_hash', 'created_at'], name='suspicious__fingerp_fee377_idx'),
        ),
        migrations.AddIndex(
            model_name='suspiciousactivity',
            index=models.Index(fields=['activity_type', 'severity_level'], name='suspicious__activit_075f9e_idx'),
        ),
        migrations.AddIndex(
            model_name='suspiciousactivity',
            index=models.Index(fields=['flagged_for_law_enforcement', 'created_at'], name='suspicious__flagged_50a39b_idx'),
        ),
        migrations.AddIndex(
            model_name='devicefingerprint',
            index=models.Index(fields=['fingerprint_hash'], name='device_fing_fingerp_25f02a_idx'),
        ),
        migrations.AddIndex(
            model_name='devicefingerprint',
            index=models.Index(fields=['is_suspicious', 'last_seen'], name='device_fing_is_susp_8de616_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['case', 'priority', 'created_at'], name='alerts_case_id_53858d_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['acknowledged', 'resolved'], name='alerts_acknowl_081d6a_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['alert_type', 'created_at'], name='alerts_alert_t_28b6d7_idx'),
        ),
    ]
