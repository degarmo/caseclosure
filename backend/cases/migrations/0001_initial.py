# Generated by Django 4.2.19 on 2025-08-22 02:23

import cases.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_id', models.CharField(default='beacon', help_text='Selected template design', max_length=50)),
                ('template_version', models.CharField(default='1.0.0', help_text='Template version for compatibility', max_length=20)),
                ('template_data', models.JSONField(blank=True, default=dict, help_text='\n        Stores all template-specific customizations. Structure depends on the template!\n        Example:\n        {\n            "customizations": {\n                // These fields match the template\'s schema\n                "global": {...},\n                "sections": {...}\n            },\n            "metadata": {\n                "last_edited": "2024-01-01T00:00:00Z",\n                "editor_version": "1.0.0"\n            }\n        }\n        ')),
                ('case_title', models.CharField(help_text='Title for the case/website', max_length=200)),
                ('first_name', models.CharField(max_length=100)),
                ('middle_name', models.CharField(blank=True, max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('nickname', models.CharField(blank=True, max_length=100)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('date_of_death', models.DateField(blank=True, null=True)),
                ('date_missing', models.DateField(blank=True, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('height_feet', models.IntegerField(blank=True, null=True)),
                ('height_inches', models.IntegerField(blank=True, null=True)),
                ('weight', models.IntegerField(blank=True, help_text='Weight in pounds', null=True)),
                ('race', models.CharField(blank=True, max_length=50)),
                ('sex', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=20)),
                ('hair_color', models.CharField(blank=True, max_length=50)),
                ('eye_color', models.CharField(blank=True, max_length=50)),
                ('distinguishing_features', models.TextField(blank=True)),
                ('primary_photo', models.ImageField(blank=True, null=True, upload_to=cases.models.case_photo_upload_path)),
                ('case_number', models.CharField(blank=True, max_length=100)),
                ('case_type', models.CharField(choices=[('missing', 'Missing Person'), ('homicide', 'Homicide'), ('unidentified', 'Unidentified'), ('cold_case', 'Cold Case'), ('other', 'Other')], default='missing', max_length=50)),
                ('incident_date', models.DateField(blank=True, null=True)),
                ('incident_location', models.CharField(blank=True, max_length=255)),
                ('last_seen_location', models.CharField(blank=True, max_length=255)),
                ('investigating_agency', models.CharField(blank=True, max_length=255)),
                ('detective_name', models.CharField(blank=True, max_length=255)),
                ('detective_phone', models.CharField(blank=True, max_length=50)),
                ('detective_email', models.EmailField(blank=True, max_length=254)),
                ('reward_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('reward_details', models.TextField(blank=True)),
                ('description', models.TextField(blank=True, help_text='Main story or case description')),
                ('subdomain', models.SlugField(blank=True, help_text='Subdomain for caseclosure.org', null=True, unique=True, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.RegexValidator(message='Subdomain must be lowercase letters, numbers, and hyphens only', regex='^[a-z0-9]([a-z0-9-]{0,48}[a-z0-9])?$')])),
                ('custom_domain', models.CharField(blank=True, help_text='Custom domain like memorial.example.com', max_length=255, null=True, unique=True)),
                ('deployment_status', models.CharField(choices=[('not_deployed', 'Not Deployed'), ('deploying', 'Deploying'), ('deployed', 'Deployed'), ('failed', 'Failed'), ('updating', 'Updating')], default='not_deployed', max_length=20)),
                ('render_service_id', models.CharField(blank=True, help_text='Render.com service ID', max_length=100)),
                ('deployment_url', models.URLField(blank=True, help_text='Live website URL')),
                ('last_deployed_at', models.DateTimeField(blank=True, null=True)),
                ('deployment_error', models.TextField(blank=True)),
                ('ssl_status', models.CharField(choices=[('not_needed', 'Not Needed'), ('pending', 'Pending'), ('active', 'Active'), ('failed', 'Failed')], default='not_needed', max_length=20)),
                ('is_public', models.BooleanField(default=False, help_text='Whether the website is publicly accessible')),
                ('is_disabled', models.BooleanField(default=False, help_text='Temporarily disable the website')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cases', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'cases',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TemplateRegistry',
            fields=[
                ('template_id', models.CharField(help_text="Unique identifier like 'beacon', 'justice', 'legacy'", max_length=50, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('version', models.CharField(default='1.0.0', max_length=20)),
                ('schema', models.JSONField(default=dict, help_text='\n        UNIQUE schema for this template. Examples:\n        \n        BEACON Template might have:\n        {\n            "global": {\n                "primaryColor": {"type": "color", "label": "Primary Color", "default": "#3B82F6"},\n                "fontFamily": {"type": "select", "label": "Font", "options": ["Inter", "Roboto"], "default": "Inter"}\n            },\n            "sections": {\n                "hero": {\n                    "title": {"type": "text", "label": "Hero Title", "default": "Help Us Find"},\n                    "subtitle": {"type": "text", "label": "Subtitle"},\n                    "backgroundImage": {"type": "image", "label": "Background Image"}\n                },\n                "timeline": {\n                    "showTimeline": {"type": "boolean", "label": "Show Timeline", "default": true},\n                    "events": {"type": "array", "label": "Timeline Events"}\n                },\n                "photoGallery": {\n                    "title": {"type": "text", "label": "Gallery Title", "default": "Photos"},\n                    "layout": {"type": "select", "options": ["grid", "carousel"], "default": "grid"}\n                }\n            }\n        }\n        \n        JUSTICE Template might have:\n        {\n            "global": {\n                "primaryColor": {"type": "color", "label": "Primary Color", "default": "#DC2626"},\n                "badgeNumber": {"type": "text", "label": "Badge Number"}\n            },\n            "sections": {\n                "caseFacts": {\n                    "title": {"type": "text", "label": "Case Facts Title"},\n                    "showCaseNumber": {"type": "boolean", "default": true}\n                },\n                "evidence": {\n                    "showEvidence": {"type": "boolean", "label": "Show Evidence Section"},\n                    "documents": {"type": "array", "label": "Evidence Documents"}\n                },\n                "lawEnforcement": {\n                    "departmentLogo": {"type": "image", "label": "Department Logo"},\n                    "contactMessage": {"type": "richtext", "label": "Contact Message"}\n                }\n            }\n        }\n        \n        LEGACY Template might have completely different sections:\n        {\n            "sections": {\n                "lifeStory": {\n                    "narrative": {"type": "richtext", "label": "Life Story"},\n                    "birthPlace": {"type": "text", "label": "Birth Place"}\n                },\n                "memorialWall": {\n                    "allowGuestPosts": {"type": "boolean", "default": true}\n                },\n                "photoAlbums": {\n                    "albums": {"type": "array", "label": "Photo Albums"}\n                }\n            }\n        }\n        ')),
                ('components', models.JSONField(default=dict, help_text='Maps section names to React component paths')),
                ('preview_image', models.URLField(blank=True, null=True)),
                ('thumbnail_image', models.URLField(blank=True, null=True)),
                ('features', models.JSONField(default=list, help_text="List of features: ['spotlight', 'guestbook', 'timeline', 'donation']")),
                ('is_active', models.BooleanField(default=True)),
                ('is_premium', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Template registries',
                'db_table': 'template_registry',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CasePhoto',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(upload_to=cases.models.case_photo_upload_path)),
                ('caption', models.CharField(blank=True, max_length=255)),
                ('is_public', models.BooleanField(default=True)),
                ('order', models.IntegerField(default=0)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='cases.case')),
            ],
            options={
                'db_table': 'case_photos',
                'ordering': ['order', 'uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='SpotlightPost',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=255)),
                ('content', models.TextField()),
                ('excerpt', models.TextField(blank=True, help_text='Short summary for preview', max_length=500)),
                ('featured_image', models.ImageField(blank=True, null=True, upload_to=cases.models.spotlight_photo_upload_path)),
                ('image_gallery', models.JSONField(blank=True, default=list, help_text='List of image URLs for gallery')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('scheduled', 'Scheduled'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('scheduled_for', models.DateTimeField(blank=True, null=True)),
                ('meta_description', models.CharField(blank=True, max_length=160)),
                ('view_count', models.IntegerField(default=0)),
                ('is_pinned', models.BooleanField(default=False, help_text='Pin to top of spotlight feed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spotlight_posts', to='cases.case')),
            ],
            options={
                'db_table': 'spotlight_posts',
                'ordering': ['-is_pinned', '-published_at', '-created_at'],
                'indexes': [models.Index(fields=['case', 'status', '-published_at'], name='spotlight_p_case_id_91d518_idx')],
                'unique_together': {('case', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='DeploymentLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action', models.CharField(choices=[('deploy', 'Initial Deploy'), ('update', 'Update'), ('rollback', 'Rollback'), ('dns_update', 'DNS Update'), ('ssl_provision', 'SSL Provision'), ('delete', 'Delete')], max_length=50)),
                ('status', models.CharField(choices=[('started', 'Started'), ('in_progress', 'In Progress'), ('success', 'Success'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], max_length=20)),
                ('render_deploy_id', models.CharField(blank=True, max_length=100)),
                ('details', models.JSONField(blank=True, default=dict)),
                ('error_message', models.TextField(blank=True)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.IntegerField(blank=True, null=True)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deployment_logs', to='cases.case')),
            ],
            options={
                'db_table': 'deployment_logs',
                'ordering': ['-started_at'],
                'indexes': [models.Index(fields=['case', '-started_at'], name='deployment__case_id_896931_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['subdomain'], name='cases_subdoma_e6a64a_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['custom_domain'], name='cases_custom__8477db_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['user', '-created_at'], name='cases_user_id_8ed2f5_idx'),
        ),
    ]
